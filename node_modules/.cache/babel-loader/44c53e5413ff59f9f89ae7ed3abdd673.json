{"ast":null,"code":"var _jsxFileName = \"D:\\\\programmer\\\\three-demo\\\\src\\\\map.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport * as d3geo from \"d3-geo\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport mapJson from \"./map.json\";\nimport \"./index.css\";\nexport default class Map extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.displayLabel = () => {\n      let canvas = document.querySelector(\"#name\");\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext(\"2d\"); // 创建离屏canvas\n\n      const offCanvas = document.createElement(\"canvas\");\n      offCanvas.width = width;\n      offCanvas.height = height;\n      const ctxOffCanvas = canvas.getContext(\"2d\");\n      ctxOffCanvas.font = \"16px Arial\";\n      ctxOffCanvas.strokeStyle = \"#FFFFFF\";\n      ctxOffCanvas.fillStyle = \"#000000\"; // names用来存储名称,重叠的部分不放在里面\n\n      const names = [];\n      this.map.children.forEach((ele, index) => {\n        if (!ele.properties._centroid) {\n          return;\n        }\n\n        console.log(ele.properties._centroid);\n        const x = ele.properties._centroid[0];\n        const y = -ele.properties._centroid[1];\n        const z = 4;\n        const vector = new THREE.Vector3(x, y, z);\n        const position = vector.project(this.camera);\n        const name = ele.properties.name;\n        const left = (vector.x + 1) / 2 * width;\n        const top = -(vector.y - 1) / 2 * height;\n        const text = {\n          name,\n          left,\n          top,\n          width: ctxOffCanvas.measureText(name).width,\n          height: 16\n        };\n        let show = true;\n\n        for (let i = 0; i < names.length; i++) {\n          if (text.left + text.width < names[i].left || text.top + text.height < names[i].top || names[i].left + names[i].width < text.left || names[i].top + names[i].height < text.top) {\n            show = true;\n          } else {\n            show = false;\n            break;\n          }\n        }\n\n        if (show) {\n          names.push(text);\n          ctxOffCanvas.strokeText(name, left, top);\n          ctxOffCanvas.fillText(name, left, top);\n        }\n      });\n      ctx.drawImage(offCanvas, 0, 0);\n    };\n  }\n\n  initMap() {\n    const prj = d3geo.geoMercator().center([120.197, 30.29]).scale(80).translate([0, 0]);\n    mapJson.features.forEach(ele => {\n      const province = new THREE.Object3D();\n      const coord = ele.geometry.coordinates;\n      coord.forEach(multiPlg => {\n        multiPlg.forEach(plg => {\n          const shape = new THREE.Shape();\n          const lineMaterial = new THREE.LineBasicMaterial({\n            color: 0xffffff\n          });\n          const lineGeometry = new THREE.Geometry();\n\n          for (let i = 0; i < plg.length; i++) {\n            const [x, y] = prj(plg[i]);\n\n            if (i === 0) {\n              shape.moveTo(x, -y);\n            }\n\n            shape.lineTo(x, -y);\n            lineGeometry.vertices.push(new THREE.Vector3(x, -y, 4.01));\n          }\n\n          const extrudeSetting = {\n            depth: 4,\n            bevelEnabled: false\n          };\n          const geometry = new THREE.ExtrudeGeometry(shape, extrudeSetting);\n          const material = new THREE.MeshBasicMaterial({\n            color: \"#25b864\",\n            transparent: true,\n            opacity: 0.6\n          });\n          const mesh = new THREE.Mesh(geometry, material);\n          province.add(mesh);\n          const line = new THREE.Line(lineGeometry, lineMaterial);\n          province.add(line);\n        });\n      });\n      province.properties = ele.properties;\n\n      if (ele.properties.centroid) {\n        const [x, y] = prj(ele.properties.centroid);\n        province.properties._centroid = [x, y];\n      }\n\n      this.map.add(province);\n    });\n    this.scene.add(this.map);\n  }\n\n  initThree() {\n    this.scene = new THREE.Scene(); // 设置场景背景色\n\n    this.scene.background = new THREE.Color(0xf0f0f0);\n    this.map = new THREE.Object3D();\n    const fov = 35;\n    const aspect = window.innerWidth / window.innerHeight;\n    const near = 1;\n    const far = 10000; // 相机\n\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far); // 设置摄像机的位置\n\n    this.camera.position.set(0, -70, 90);\n    this.camera.lookAt(0, 0, 0);\n    const canvas = document.querySelector(\"#map\");\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      canvas\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight - 10); // 添加灯光\n\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(300, 1000, 500);\n    light.target.position.set(0, 0, 0);\n    light.castShadow = true;\n    light.shadow.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);\n    light.shadow.bias = 0.0001;\n    light.shadow.mapSize.width = light.shadow.mapSize.height = 1024;\n    this.scene.add(light); //网格和坐标\n\n    const axesHelper = new THREE.AxesHelper(2000);\n    this.scene.add(axesHelper);\n    const gridHelper = new THREE.GridHelper(600, 60);\n    this.scene.add(gridHelper);\n    const controls = new Orbitcontrols(this.camera, this.renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.rotateSpeed = 0.35;\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth / window.innerHeight);\n  }\n\n  componentDidMount() {\n    this.initThree();\n    this.initMap();\n    this.displayLabel();\n    this.renderer.render(this.scene, this.camera);\n    document.addEventListener(\"mousemove\", this.onMouseMove, false);\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n  }\n\n  onMouseMove(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/programmer/three-demo/src/map.js"],"names":["React","Component","THREE","d3geo","Orbitcontrols","mapJson","Map","displayLabel","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","ctx","getContext","offCanvas","createElement","ctxOffCanvas","font","strokeStyle","fillStyle","names","map","children","forEach","ele","index","properties","_centroid","console","log","x","y","z","vector","Vector3","position","project","camera","name","left","top","text","measureText","show","i","length","push","strokeText","fillText","drawImage","initMap","prj","geoMercator","center","scale","translate","features","province","Object3D","coord","geometry","coordinates","multiPlg","plg","shape","Shape","lineMaterial","LineBasicMaterial","color","lineGeometry","Geometry","moveTo","lineTo","vertices","extrudeSetting","depth","bevelEnabled","ExtrudeGeometry","material","MeshBasicMaterial","transparent","opacity","mesh","Mesh","add","line","Line","centroid","scene","initThree","Scene","background","Color","fov","aspect","near","far","PerspectiveCamera","set","lookAt","renderer","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","intensity","light","DirectionalLight","target","castShadow","shadow","bias","mapSize","axesHelper","AxesHelper","gridHelper","GridHelper","controls","domElement","enableDamping","dampingFactor","rotateSpeed","onWindowResize","updateProjectionMatrix","componentDidMount","render","addEventListener","onMouseMove","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport * as d3geo from \"d3-geo\";\nimport Orbitcontrols from \"three-orbitcontrols\";\nimport mapJson from \"./map.json\";\nimport \"./index.css\";\n\nexport default class Map extends Component {\n  initMap() {\n    const prj = d3geo\n      .geoMercator()\n      .center([120.197, 30.29])\n      .scale(80)\n      .translate([0, 0]);\n    mapJson.features.forEach((ele) => {\n      const province = new THREE.Object3D();\n      const coord = ele.geometry.coordinates;\n      coord.forEach((multiPlg) => {\n        multiPlg.forEach((plg) => {\n          const shape = new THREE.Shape();\n          const lineMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });\n          const lineGeometry = new THREE.Geometry();\n          for (let i = 0; i < plg.length; i++) {\n            const [x, y] = prj(plg[i]);\n\n            if (i === 0) {\n              shape.moveTo(x, -y);\n            }\n\n            shape.lineTo(x, -y);\n            lineGeometry.vertices.push(new THREE.Vector3(x, -y, 4.01));\n          }\n\n          const extrudeSetting = {\n            depth: 4,\n            bevelEnabled: false,\n          };\n          const geometry = new THREE.ExtrudeGeometry(shape, extrudeSetting);\n          const material = new THREE.MeshBasicMaterial({\n            color: \"#25b864\",\n            transparent: true,\n            opacity: 0.6,\n          });\n          const mesh = new THREE.Mesh(geometry, material);\n          province.add(mesh);\n          const line = new THREE.Line(lineGeometry, lineMaterial);\n          province.add(line);\n        });\n      });\n\n      province.properties = ele.properties;\n      if (ele.properties.centroid) {\n        const [x, y] = prj(ele.properties.centroid);\n        province.properties._centroid = [x, y];\n      }\n      this.map.add(province);\n    });\n    this.scene.add(this.map);\n  }\n  initThree() {\n    this.scene = new THREE.Scene();\n    // 设置场景背景色\n    this.scene.background = new THREE.Color(0xf0f0f0);\n    this.map = new THREE.Object3D();\n\n    const fov = 35;\n    const aspect = window.innerWidth / window.innerHeight;\n    const near = 1;\n    const far = 10000;\n    // 相机\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    // 设置摄像机的位置\n    this.camera.position.set(0, -70, 90);\n    this.camera.lookAt(0, 0, 0);\n\n    const canvas = document.querySelector(\"#map\");\n    this.renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      canvas,\n    });\n\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight - 10);\n\n    // 添加灯光\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(300, 1000, 500);\n    light.target.position.set(0, 0, 0);\n    light.castShadow = true;\n\n    light.shadow.camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    light.shadow.bias = 0.0001;\n    light.shadow.mapSize.width = light.shadow.mapSize.height = 1024;\n    this.scene.add(light);\n\n    //网格和坐标\n    const axesHelper = new THREE.AxesHelper(2000);\n    this.scene.add(axesHelper);\n    const gridHelper = new THREE.GridHelper(600, 60);\n    this.scene.add(gridHelper);\n    const controls = new Orbitcontrols(this.camera, this.renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.rotateSpeed = 0.35;\n  }\n\n  displayLabel = () => {\n    let canvas = document.querySelector(\"#name\");\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext(\"2d\");\n    // 创建离屏canvas\n    const offCanvas = document.createElement(\"canvas\");\n    offCanvas.width = width;\n    offCanvas.height = height;\n    const ctxOffCanvas = canvas.getContext(\"2d\");\n    ctxOffCanvas.font = \"16px Arial\";\n    ctxOffCanvas.strokeStyle = \"#FFFFFF\";\n    ctxOffCanvas.fillStyle = \"#000000\";\n    // names用来存储名称,重叠的部分不放在里面\n    const names = [];\n    this.map.children.forEach((ele, index) => {\n      if (!ele.properties._centroid) {\n        return;\n      }\n      console.log(ele.properties._centroid);\n\n      const x = ele.properties._centroid[0];\n      const y = -ele.properties._centroid[1];\n      const z = 4;\n      const vector = new THREE.Vector3(x, y, z);\n      const position = vector.project(this.camera);\n      const name = ele.properties.name;\n      const left = ((vector.x + 1) / 2) * width;\n      const top = (-(vector.y - 1) / 2) * height;\n      const text = {\n        name,\n        left,\n        top,\n        width: ctxOffCanvas.measureText(name).width,\n        height: 16,\n      };\n\n      let show = true;\n      for (let i = 0; i < names.length; i++) {\n        if (\n          text.left + text.width < names[i].left ||\n          text.top + text.height < names[i].top ||\n          names[i].left + names[i].width < text.left ||\n          names[i].top + names[i].height < text.top\n        ) {\n          show = true;\n        } else {\n          show = false;\n          break;\n        }\n      }\n      if (show) {\n        names.push(text);\n        ctxOffCanvas.strokeText(name, left, top);\n        ctxOffCanvas.fillText(name, left, top);\n      }\n    });\n    ctx.drawImage(offCanvas, 0, 0);\n  };\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth / window.innerHeight);\n  }\n\n  componentDidMount() {\n    this.initThree();\n    this.initMap();\n    this.displayLabel();\n\n    this.renderer.render(this.scene, this.camera);\n    document.addEventListener(\"mousemove\", this.onMouseMove, false);\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n  }\n\n  onMouseMove(event) {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <canvas id=\"map\"></canvas>\n        <canvas id=\"name\"></canvas>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}